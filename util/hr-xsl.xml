<?xml version="1.0" encoding="UTF-8"?>

<!--
This Ant build script defines several helper tasks for using HR-XSL. To use, simply import it, then call the pre-defined macros. See the HR-XSL examples for some examples.
Author: Trevor Harmon
-->

<project name="hr-xsl" default="all">

	<!-- Grab the directory of this build file (instead of the directory of whatever includes this file)-->
	<dirname property="hr-xsl.basedir" file="${ant.file.hr-xsl}"/>

	<!-- Location of the DocBook XSL stylesheets -->
	<property name="docbook.xsl" value="${hr-xsl.basedir}/../lib/docbook-xsl-1.70.1"/> 

	<!-- Make sure the parameters have been initialized so that the -->
	<!-- macros don't fail if the user doesn't specify them. -->
	<property name="docbook.params" value=""/>
	<property name="hr-xsl.params" value=""/>

	<path id="saxon.classpath">   
		<fileset dir="${hr-xsl.basedir}/../lib/saxon-b-8.7.3">   
			<include name="**/*.jar"/>   
		</fileset>   
	</path>   

	<!-- Load the FOP task -->
    <taskdef name="fop" classname="org.apache.fop.tools.anttasks.Fop">
		<classpath>
			<fileset dir="${hr-xsl.basedir}/../lib/fop-trunk-r419324">
				<include name="fop.jar"/>
				<include name="lib/*.jar"/>
			</fileset>   
		</classpath>
	</taskdef>

	<!-- Load the Ant-Contrib tasks -->
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="${hr-xsl.basedir}/../lib/ant-contrib-1.0b2/ant-contrib.jar"/>
		</classpath>
	</taskdef>

	<!-- Performs an XSL translation of an XML file using the Saxon processor. -->
	<macrodef name="saxon">
		<attribute name="in" description="An XML file"/>
		<attribute name="xsl" description="A stylesheet for translating the XML file"/>
		<attribute name="out" description="A file to receive the output of the translation"/>
		<attribute name="params" description="The XSL parameters to be passed to the stylesheet" default=""/>
		<sequential>
			<echo level="info" message="Translating '@{in}' to '@{out}'..."/>
			<!-- Theoretically, we should be able to use the built-in xslt Ant task here, but there doesn't-->
			<!-- seem to be any way of forcing the task to use an external processor, such as Saxon, even -->
			<!-- when a classpath is specified. Instead, we call Saxon directly. -->
			<java classname="net.sf.saxon.Transform" classpathref="saxon.classpath" fork="true" failOnError="true">  
				<arg line="-o '@{out}' '@{in}' '@{xsl}' @{params}"/>  
			</java>  
		</sequential>
	</macrodef>

	<!-- Converts an HR-XML resume file into DocBook format -->
	<macrodef name="resume-to-docbook">
		<attribute name="in" description="The filename of the HR-XML resume"/>
		<sequential>
			<dirname property="in.dir" file="@{in}"/>
			<basename property="in.filename" file="@{in}" suffix=".xml"/> 
			<property name="in" value="${in.dir}/${in.filename}"/>
			<saxon in="@{in}" out="${in}-docbook.xml"
				xsl="${hr-xsl.basedir}/../xsl/docbook/hr-xsl.xsl"
				params="${hr-xsl.params}"/>
		</sequential>
	</macrodef>

	<!-- Converts a DocBook file into a specified format -->
	<macrodef name="docbook-to"> 
		<attribute name="in" description="The DocBook file"/>
		<attribute name="out" description="The output file"/>
		<attribute name="format" description="The format of the output; must be a DocBook XSL sub-directory"/>
		<attribute name="stylesheet" description="The filename of the root stylesheet to use" default="docbook.xsl"/>
		<sequential> 
			<saxon
				in="@{in}"
				out="@{out}"
				xsl="${docbook.xsl}/@{format}/@{stylesheet}"
				params="${docbook.params}"/>
		</sequential> 
	</macrodef>

	<!-- Converts an HR-XML resume to HTML -->
	<macrodef name="resume-to-html"> 
		<attribute name="in" description="The filename of the HR-XML resume"/> 
		<sequential>
			
			<!-- Determine the filenames -->
			<dirname property="in.dir" file="@{in}"/> 
			<basename property="in.filename" file="@{in}" suffix=".xml"/>  
			<property name="in" value="${in.dir}/${in.filename}"/>
			
			<!-- Convert the HR-XML to DocBook -->
			<outofdate>
				<sourcefiles>
					<pathelement path="@{in}"/>
				</sourcefiles>
				<targetfiles>
					<pathelement path="${in}-docbook.xml"/>
				</targetfiles>
				<sequential>
					<resume-to-docbook in="@{in}"/> 
				</sequential>
			</outofdate>
			
			<!-- Convert the DocBook to HTML -->
			<outofdate>
				<sourcefiles>
					<pathelement path="${in}-docbook.xml"/>
				</sourcefiles>
				<targetfiles>
					<pathelement path="${in}.html"/>
				</targetfiles>
				<sequential>
					<docbook-to format="html" in="${in}-docbook.xml" out="${in}.html"/> 
				</sequential>
			</outofdate>
			
		</sequential> 
	</macrodef> 
	
	<!-- Converts an HR-XML resume to PDF -->
	<macrodef name="resume-to-pdf"> 
		<attribute name="in" description="The filename of the HR-XML resume"/> 
		<sequential> 

			<!-- Determine the filenames -->
			<dirname property="in.dir" file="@{in}"/> 
			<basename property="in.filename" file="@{in}" suffix=".xml"/>  
			<property name="in" value="${in.dir}/${in.filename}"/>

			<!-- Convert the HR-XML to DocBook -->
			<outofdate>
				<sourcefiles>
					<pathelement path="@{in}"/>
				</sourcefiles>
				<targetfiles>
					<pathelement path="${in}-docbook.xml"/>
				</targetfiles>
				<sequential>
					<resume-to-docbook in="@{in}"/> 
				</sequential>
			</outofdate>

			<!-- Convert the DocBook to FO -->
			<outofdate>
				<sourcefiles>
					<pathelement path="${in}-docbook.xml"/>
				</sourcefiles>
				<targetfiles>
					<pathelement path="${in}.fo"/>
				</targetfiles>
				<sequential>
					<docbook-to format="fo" in="${in}-docbook.xml" out="${in}.fo"/> 
				</sequential>
			</outofdate>

			<!-- Convert the FO to PDF -->
			<outofdate>
				<sourcefiles>
					<pathelement path="${in}.fo"/>
				</sourcefiles>
				<targetfiles>
					<pathelement path="${in}.pdf"/>
				</targetfiles>
				<sequential>
					<fop fofile="${in}.fo" outfile="${in}.pdf" format="application/pdf"/>
				</sequential>
			</outofdate>

		</sequential> 
	</macrodef> 
	
	<!-- Converts an HR-XML resume to plain text -->
	<macrodef name="resume-to-text"> 
		<attribute name="in" description="The filename of the HR-XML resume"/> 
		<sequential>

			<!-- Determine the filenames -->
			<dirname property="in.dir" file="@{in}"/> 
			<basename property="in.filename" file="@{in}" suffix=".xml"/>  
			<property name="in" value="${in.dir}/${in.filename}"/>

			<!-- Convert the HR-XML to HTML -->
			<resume-to-html in="@{in}"/>

			<!-- Convert the HTML to plain text -->
			<outofdate>
				<sourcefiles>
					<pathelement path="${in}.html"/>
				</sourcefiles>
				<targetfiles>
					<pathelement path="${in}.txt"/>
				</targetfiles>
				<sequential>
					
					<!-- Make sure the lynx command is available -->
					<property environment="env"/>
					<available file="lynx" filepath="${env.PATH}" property="lynx-available"/>
					<fail unless="lynx-available" message="Could not create plain-text version of resume because lynx was not found on the path (${env.PATH}). Please install Lynx (http://lynx.isc.org/)."/>
					
					<!-- Use lynx to convert the HTML to plain text -->
					<exec executable="lynx" output="${in}.txt">
						<arg line="-dump -nolist '${in}.html'"/>
					</exec>
				</sequential>
			</outofdate>

		</sequential> 
	</macrodef> 
	
</project>
