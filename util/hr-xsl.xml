<?xml version="1.0" encoding="UTF-8"?>

<!--
This Ant build script defines several helper tasks for using HR-XSL. To use, simply import it, then call the pre-defined macros. See the HR-XSL examples for some examples.
Author: Trevor Harmon
-->

<project name="hr-xsl" default="all">

	<!-- Require Ant 1.8 or higher so that the Xslt task uses Saxon properly -->
	<antversion property="ant.version.1.8" atleast="1.8"/>
	<fail unless="ant.version.1.8" message="Ant 1.8 or higher is required"/>

	<!-- Handle to the environment properties -->
	<property environment="env"/>
	
	<!-- Special case to deal with Windows using "Path" instead of "PATH" -->
	<property name="env.PATH" value="${env.Path}"/>

	<!-- Directory of this build file (instead of the directory of whatever includes this file)-->
	<dirname property="hr-xsl.basedir" file="${ant.file.hr-xsl}/.."/>

	<!-- Location of the DocBook XSL stylesheets -->
	<property name="docbook.xsl.dir" value="${hr-xsl.basedir}/lib/docbook-xsl-1.74.0"/> 

	<!-- Location of the DocBook DTD -->
	<property name="docbook.xml.dir" value="${hr-xsl.basedir}/lib/docbook-xml-4.5"/> 
	
	<!-- Location of HR-XML distribution -->
	<property name="hr-xml.dir" value="${hr-xsl.basedir}/lib/hr-xml-2.5/HR-XML-2_5"/>
	
	<!-- Location of user's XSL parameters file -->
	<property name="parameters.file" value="${basedir}/parameters.xsl"/>

	<path id="saxon.classpath">   
		<fileset dir="${hr-xsl.basedir}/lib/saxon-b-9.1.0.2">   
			<include name="**/*.jar"/>   
		</fileset> 
	</path>   

	<!-- Performs an XSL translation of an XML file using the Saxon processor. -->
	<presetdef name="saxon">
		<xslt classpathref="saxon.classpath">
			<factory name="net.sf.saxon.TransformerFactoryImpl"/>
			<xmlcatalog>
				<entity publicId="parameters" location="${parameters.file}"/>
			</xmlcatalog>
		</xslt>
	</presetdef>

	<!-- Load the FOP task -->
    <taskdef name="fop" classname="org.apache.fop.tools.anttasks.Fop">
		<classpath>
			<fileset dir="${hr-xsl.basedir}/lib/fop-0.95">
				<include name="fop.jar"/>
				<include name="lib/*.jar"/> 
			</fileset>
			<fileset dir="${hr-xsl.basedir}/lib/offo-hyphenation-1.2">
				<include name="fop-hyph.jar"/>
			</fileset>
		</classpath>
	</taskdef>
	
	<!-- Load the JTidy task -->
	<taskdef name="tidy" classname="org.w3c.tidy.ant.JTidyTask">
		<classpath>
			<pathelement location="${hr-xsl.basedir}/lib/jtidy-r8-SNAPSHOT/jtidy-r8-SNAPSHOT.jar"/>
		</classpath>
	</taskdef>

	<!-- Load the Ant-Contrib tasks -->
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="${hr-xsl.basedir}/lib/ant-contrib-1.0b3/ant-contrib.jar"/>
		</classpath>
	</taskdef>

	<!-- Tidy up an HTML file -->
	<macrodef name="tidy-html">
		<attribute name="in" description="The HTML file to tidy up"/>
		<sequential>
			<tempfile property="temp.file"/> 
			<tidy srcfile="@{in}" destfile="${temp.file}" failonerror="true"> 
				<parameter name="indent" value="auto"/>  
				<parameter name="wrap" value="0"/>   <!-- Turn off line wrapping -->
			</tidy> 
			<move file="${temp.file}" tofile="@{in}"/>  
		</sequential>
	</macrodef>
	
	<!-- Converts an HR-XML resume file into DocBook format -->
	<macrodef name="resume-to-docbook">
		<attribute name="in" description="The filename of the HR-XML resume"/>
		<sequential>
			<dirname property="in.dir" file="@{in}"/>
			<basename property="in.filename" file="@{in}" suffix=".xml"/> 
			<property name="in" value="${in.dir}/${in.filename}"/>
			<saxon in="@{in}" out="${in}-docbook.xml" style="${hr-xsl.basedir}/util/customization-layer.xsl">
				<xmlcatalog>
					<entity publicId="stylesheet" location="${hr-xsl.basedir}/xsl/docbook/hr-xsl.xsl"/>
				</xmlcatalog>
			</saxon>
		</sequential>
	</macrodef>

	<!-- Converts a DocBook file into a specified format -->
	<macrodef name="docbook-to"> 
		<attribute name="in" description="The DocBook file"/>
		<attribute name="out" description="The output file"/>
		<attribute name="format" description="The format of the output ('fo' or 'html')"/>
		<sequential> 
			<saxon in="@{in}" out="@{out}" style="${hr-xsl.basedir}/util/customization-layer.xsl">
				<xmlcatalog> 
					<entity publicId="stylesheet" location="${docbook.xsl.dir}/@{format}/docbook.xsl"/>
					<!-- Use the local DocBook DTD so that translations can be performed offline -->
					<dtd publicId="-//OASIS//DTD DocBook XML V4.5//EN" location="${docbook.xml.dir}/docbookx.dtd"/>
				</xmlcatalog>
			</saxon>
		</sequential> 
	</macrodef>

	<!-- Converts an HR-XML resume to HTML -->
	<macrodef name="resume-to-html"> 
		<attribute name="in" description="The filename of the HR-XML resume"/> 
		<sequential>
			
			<!-- Determine the filenames -->
			<dirname property="in.dir" file="@{in}"/> 
			<basename property="in.filename" file="@{in}" suffix=".xml"/>  
			<property name="in" value="${in.dir}/${in.filename}"/>
			
			<!-- Convert the HR-XML to DocBook -->
			<outofdate>
				<sourcefiles>
					<pathelement path="@{in}"/>
				</sourcefiles>
				<targetfiles>
					<pathelement path="${in}-docbook.xml"/>
				</targetfiles>
				<sequential>
					<resume-to-docbook in="@{in}"/> 
					<!-- Do not tidy the XML output. Both jTidy and xmllint are unable to preserve spaces properly when tidying. -->
					<!-- <tidy-xml in="${in}-docbook.xml"/> -->
				</sequential>
			</outofdate>

			<!-- Convert the DocBook to HTML -->
			<outofdate>
				<sourcefiles>
					<pathelement path="${in}-docbook.xml"/>
				</sourcefiles>
				<targetfiles>
					<pathelement path="${in}.html"/>
				</targetfiles>
				<sequential>
					<docbook-to format="html" in="${in}-docbook.xml" out="${in}.html"/> 
					<tidy-html in="${in}.html"/>
				</sequential>
			</outofdate>
			
		</sequential> 
	</macrodef> 
	
	<!-- Converts an HR-XML resume to PDF -->
	<macrodef name="resume-to-pdf"> 
		<attribute name="in" description="The filename of the HR-XML resume"/> 
		<sequential> 

			<!-- Determine the filenames -->
			<dirname property="in.dir" file="@{in}"/> 
			<basename property="in.filename" file="@{in}" suffix=".xml"/>  
			<property name="in" value="${in.dir}/${in.filename}"/>

			<!-- Convert the HR-XML to DocBook -->
			<outofdate>
				<sourcefiles>
					<pathelement path="@{in}"/>
				</sourcefiles>
				<targetfiles>
					<pathelement path="${in}-docbook.xml"/>
				</targetfiles>
				<sequential>
					<resume-to-docbook in="@{in}"/> 
					<!-- Do not tidy the XML output. Both jTidy and xmllint are unable to preserve spaces properly when tidying. -->
					<!-- <tidy-xml in="${in}-docbook.xml"/> -->
				</sequential>
			</outofdate>

			<!-- Convert the DocBook to FO -->
			<outofdate> 
				<sourcefiles> 
					<pathelement path="${in}-docbook.xml"/> 
				</sourcefiles> 
				<targetfiles> 
					<pathelement path="${in}.fo"/> 
				</targetfiles> 
				<sequential> 
					<docbook-to format="fo" in="${in}-docbook.xml" out="${in}.fo"/>  
					<!-- Do not tidy the XML output. Both jTidy and xmllint are unable to preserve spaces properly when tidying. -->
					<!-- <tidy-xml in="${in}.fo"/>  -->
				</sequential> 
			</outofdate> 

			<!-- Convert the FO to PDF -->
			<outofdate> 
				<sourcefiles> 
					<pathelement path="${in}.fo"/> 
				</sourcefiles> 
				<targetfiles> 
					<pathelement path="${in}.pdf"/> 
				</targetfiles> 
				<sequential> 
					<fop fofile="${in}.fo" outfile="${in}.pdf"
						userconfig="${hr-xsl.basedir}/lib/fop-0.95/conf/fop.xconf"
						format="application/pdf"/> 
				</sequential> 
			</outofdate> 

		</sequential> 
	</macrodef> 
	
	<!-- Converts an HR-XML resume to plain text -->
	<macrodef name="resume-to-text"> 
		<attribute name="in" description="The filename of the HR-XML resume"/> 
		<sequential>

			<!-- Determine the filenames -->
			<dirname property="in.dir" file="@{in}"/> 
			<basename property="in.filename" file="@{in}" suffix=".xml"/>  
			<property name="in" value="${in.dir}${file.separator}${in.filename}"/>

			<!-- Convert the HR-XML to HTML -->
			<resume-to-html in="@{in}"/>

			<!-- Convert the HTML to plain text -->
			<outofdate>
				<sourcefiles>
					<pathelement path="${in}.html"/>
				</sourcefiles>
				<targetfiles>
					<pathelement path="${in}.txt"/>
				</targetfiles>
				<sequential>
					
					<!-- Make sure the lynx command is available -->
					<condition property="lynx.executable" value="lynx.exe" else="lynx">
						<os family="windows"/>
					</condition>
					<available file="${lynx.executable}" filepath="${env.PATH}" type="file" property="lynx-available"/>
					<fail unless="lynx-available" message="Could not create plain-text version of resume because ${lynx.executable} was not found on the path (${env.PATH}). Please install Lynx (http://lynx.isc.org/)."/>

					<!-- Use lynx to convert the HTML to plain text -->
					<exec executable="${lynx.executable}" output="${in}.txt">
						<arg line="-dump -nolist '${in}.html'"/>
					</exec>

				</sequential>
			</outofdate>

		</sequential> 
	</macrodef> 
	
	<!-- Validates the structure of the given HR-XML resume -->
	<macrodef name="validate">
		<attribute name="in" description="The filename of the HR-XML resume"/>
		<sequential>
			<schemavalidate file="@{in}" lenient="false" failonerror="true" warn="true">
				<schema namespace="http://ns.hr-xml.org/2007-04-15" file="${hr-xml.dir}/SEP/Resume.xsd"/>
			</schemavalidate>
		</sequential>
	</macrodef>
	
</project>
